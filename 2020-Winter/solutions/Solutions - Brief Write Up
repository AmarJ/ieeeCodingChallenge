~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Question 1~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


d = collections.defaultdict(int)
for c in s:
    d[c] += 1
print(sorted(d.items(), key=lambda x: x[1], reverse=True)[0])



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Question 2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Refer to screenshot

#include<iostream>
#include<string>
#include<cstring>

using namespace std;

// Below function finds the longest palindromic substring using dynamic programming
string LongestPalindromicSubstring (string str) {
    
    int N = str.size();
    int palindrome_begins_at = 0;
    int palindrome_length = 0;

    bool ispalindrome_table[N][N];
    memset(ispalindrome_table, false, sizeof(bool)*N*N);

    // Base case: Every character in a string is a palindrome.
    for (int i=0; i<N; i++) {
        ispalindrome_table[i][i] = true;
    }   

    // Base case: Same adjacent characters in a string make a palindrome.
    for (int i=0; i<N-1; i++) {
        if (str.at(i) == str.at(i+1)) {
           ispalindrome_table[i][i+1] = true;
        }
    }   
    
    // Loop from string length of size 3 upto the N 
    for (int len=3; len < N; len++) {
        for (int i=1; i <= N-len+1; i++) { 
            int j = i+len-1;    
            if (str[i] == str[j] and ispalindrome_table[i+1][j-1] == true) {
               ispalindrome_table[i][j] = true;
               if (len > palindrome_length) {
                  palindrome_begins_at = i;
                  palindrome_length = len;
               }
            }
        }
    }   
    
    cout << "Length of the longest palindrome : " << palindrome_length << endl;
    return str.substr(palindrome_begins_at, palindrome_length);
};



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Question 3~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

python:

V = ord(YOUR_CHAR) - ord('a')

a : 0
b : 1
.
.
.
z : 25

alphabet[ V // 5 ][ V % 5 ]

To avoid red squares just order horizontal (left, right) before vertical (down, right)


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Question 4~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def countConsecutive(N): 
      
    # constraint on values of L gives us the  
    # time Complexity as O(N^0.5) 
    count = 0
    L = 1
    while( L * (L + 1) < 2 * N): 
        a = (1.0 * N - (L * (L + 1) ) / 2) / (L + 1) 
        if (a - int(a) == 0.0): 
            count += 1
        L += 1
    return count 